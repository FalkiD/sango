-- Simulation Input File
-- For "uart_ascii_control_port"
--
-- u = UART transmit data
-- <time delay> is relative time which elapses before next line is processed.
--
-- Format:
--
-- u <time delay> xyz ...          Where wwwwwwww = relative time and (x, y, z...) = ASCII characters
-- A single Carriage Return is sent at the end of each line (at the ';' character)

-- 21-Feb-2017 Begin debug of opcode processor in simulation
-- This set of commands is useful to exercise the module under test

-- 23-Jun Send S4 MCU startup CMD0, CMD1 sequence
-- Note:1st commands MUST use 400kHz
d 10 us ;            -- Initial delay
u 0.5 ms ;            -- <CR> (Allows autobaud to obtain lock on baud rate.)

u 0.5 ms w 3000009 010624DE; -- Set DDS for sd_clk_o of 400kHz
u 0.5 ms w 300000E 0; -- Set host DMA address at 0x00
u 0.5 ms w 3000000 200 0; -- Set blk_size=512, blk_count=0
u 0.5 ms w 3000002 0 00000000; -- Write CMD0 (RESET, no response)
u 0.5 ms w 3000002 1 00000000; -- Write CMD1 (SEND_OP_COND)
--u 2.0 ms r 3000004 4; --Read CMD response
u 0.5 ms w 3000002 1 00FF8000; -- Write CMD1 (SEND_OP_COND) (ocr_pwrup_done)
--u 2.0 ms r 3000004 4; --Read CMD response
u 0.5 ms w 3000002 2 00000000; -- Write CMD2 (ALL_SEND_CID, long response)
u 0.5 ms w 3000002 3 00050000; -- Write CMD3 (SET_RELATIVE_ADDRESS)
u 0.5 ms w 3000002 7 00050000; -- Write CMD7 (SELECT) GOES TO CARD_TRAN
u 0.5 ms w 3000009 80000000; -- Set DDS for sd_clk_o of 50MHz
u 0.5 ms w 3000008 7D000002; -- Set controller timeout=32000, bus size 8 bits
u 1.5 ms w 3000002 6 03B70200; -- Write CMD6 (SWITCH) set bus width 8 bits
-- 26-Jul:Added DAC opcodes to host_ram_init.txt at
-- (Host DMA) address 0, don't need to load here anymore
-- DDS init should happen anytime SYS_RST_N goes HI
--u 1.0 ms w 300002c 02000; -- DDS init wire
--u 1.0 ms w 300002c 0;

--Change VGA gain mode with CONFIG opcode
--u 2.0 ms w 4000000 04 18 88 13 03 00 00 00 00 00 00 00; --VGA higain, 50ua ADLY, DAC_A control also 
--u 2.0 ms w 400000C 00 00 00 00 00 00 00 00 00 00 00 00; --Null terminator 
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 0.5 ms w 3000002 18 00000200; -- Write CMD24 to MMC address 0200, FIFO begin(WRITE_BLOCK)
-- read opcode processor response
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 0.5 ms w 3000002 11 00000200; -- Write CMD17 (READ_BLOCK)
--u 1.5 ms r 4000000 8; --Read response data from host adapter RAM  

--Run opcode block from host_init_ram.txt (load simple pattern w/BIAS & PULSE)
u 0.5 ms w 300000E 0; -- Set host DMA address at 0x00
u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
u 2.5 ms w 3000002 18 00000200; -- Write CMD24 to MMC address 0200, FIFO begin(WRITE_BLOCK)
-- read opcode processor response
u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
u 0.5 ms w 3000002 11 00000200; -- Write CMD17 (READ_BLOCK)
u 1.5 ms r 4000000 8; --Read response data from host adapter RAM  

--d 10 ms ; -- Wait to see 25ms blink end before starting pattern

-- test clear RAM again, load pattern, then clear RAM opcode
u 2.0 ms w 4000000 04 44 04 00 00 00 00 00 00 00 00 00; --pat_ctl[Reset] clears all RAM 
u 2.0 ms w 400000C 00 00 00 00 00 00 00 00 00 00 00 00; --Null terminator 

-- load pattern is done, test clearing pattern RAM
-- pat_ctl[RESET] 0 to 300 (0x12c)
--u 2.0 ms w 4000000 04 44 04 00 2C 01 00 00 00 00 00 00; --pat_ctl[Reset] end_addr=>0x12C (300 ticks out) 
--u 2.0 ms w 400000C 00 00 00 00 00 00 00 00 00 00 00 00; --Null terminator 

-- load pattern is done, test external trigger
-- trigconf opcode is 0x09,
-- bits 0x83 for arm, external, enable
--u 2.0 ms w 4000000 04 12 01 83 00 00 00 00 00 00 00 00; --External trigger 
--u 2.0 ms w 400000C 00 00 00 00 00 00 00 00 00 00 00 00; --Null terminator 

-- load pattern is done, run using trigger every 10ms
-- trigconf opcode is 0x09,
-- bits 0x95 for arm, continuous, source, enable
--u 2.0 ms w 4000000 04 12 01 95 0A 00 00 00 00 00 00 00; --Continuous trigger, 10ms 
--u 2.0 ms w 400000C 00 00 00 00 00 00 00 00 00 00 00 00; --Null terminator 

-- load pattern is done, now run it & read response
--u 2.0 ms w 4000000 04 44 01 00 00 00 00 00 00 00 00 00; --PAT_CTRL[Run] 
--u 2.0 ms w 400000C 00 00 00 00 00 00 00 00 00 00 00 00; --Null terminator 
-- write opcode block(sector) to MMC
u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
u 0.5 ms w 3000002 18 00000200; -- Write CMD24 to MMC address 0200, FIFO begin(WRITE_BLOCK)
-- read opcode processor response
u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
u 0.5 ms w 3000002 11 00000200; -- Write CMD17 (READ_BLOCK)
u 1.5 ms r 4000000 8; --Read response data from host adapter RAM  
-- read status registers to get pattern processing status
--u 4.0 ms r 3000038 8; -- read debug registers

-- read measurement results, args are mode, unused, & 2-byte length, how many results to read.
-- each result is 8 bytes, 16 bits each: FWDQ, FWDI, REFLQ, REFLI
--u 2.0 ms w 4000000 04 64 02 00 40 00 00 00 00 00 00 00; --Read 64 sets of raw ADC results 
--u 2.0 ms w 400000C 00 00 00 00 00 00 00 00 00 00 00 00; --Null terminator 
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 2.0 ms w 3000002 18 00000200; -- Write CMD24 to MMC address 0200, FIFO begin(WRITE_BLOCK)
-- read opcode processor response
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 0.5 ms w 3000002 11 00000200; -- Write CMD17 (READ_BLOCK)
--u 4.0 ms r 4000000 28; --Read response data from host adapter RAM  
-- read status registers to get pattern processing status
--u 4.0 ms r 3000038 8; -- read debug registers



--repeat run pattern & read results
--u 2.0 ms w 4000000 04 44 01 00 00 01 00 00 00 00 00 00; --PAT_CTRL[Run] 0x100 
--u 2.0 ms w 400000C 00 00 00 00 00 00 00 00 00 00 00 00; --Null terminator 
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 0.5 ms w 3000002 18 00000200; -- Write CMD24 to MMC address 0200, FIFO begin(WRITE_BLOCK)
-- read opcode processor response
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 0.5 ms w 3000002 11 00000200; -- Write CMD17 (READ_BLOCK)
--u 1.5 ms r 4000000 8; --Read response data from host adapter RAM  

-- read measurement results, args are mode, unused, & 2-byte length, how many results to read.
-- each result is 8 bytes, 16 bits each: FWDQ, FWDI, REFLQ, REFLI
--u 2.0 ms w 4000000 04 64 02 00 40 00 00 00 00 00 00 00; --Read 64 sets of raw adc results 
--u 2.0 ms w 400000C 00 00 00 00 00 00 00 00 00 00 00 00; --Null terminator 
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 2.0 ms w 3000002 18 00000200; -- Write CMD24 to MMC address 0200, FIFO begin(WRITE_BLOCK)
-- read opcode processor response
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 0.5 ms w 3000002 11 00000200; -- Write CMD17 (READ_BLOCK)
--u 4.0 ms r 4000000 28; --Read response data from host adapter RAM  
-- read status registers to get pattern processing status
--u 4.0 ms r 3000038 8; -- read debug registers


--CALZMON opcode, write directly
--u 2.0 ms w 4000000 04 20 00 00 02 00 ff ff 00 00 03 00; --FIgain=2, FIoffset=-1, FQgain=3 
--u 2.0 ms w 4000000 ff fe 00 00 02 00 ff fd 00 00 01 00; --FQoffset=-2, RIgain=2, RIoffset=-3, RQgain=1  
--u 2.0 ms w 400000C ff fc 00 00 00 00 00 00 00 00 00 00; --RQoffset=-4, Null terminator 
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 0.5 ms w 3000002 18 00000200; -- Write CMD24 to MMC address 0200, FIFO begin(WRITE_BLOCK)
-- read opcode processor response
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 0.5 ms w 3000002 11 00000200; -- Write CMD17 (READ_BLOCK)
--u 1.5 ms r 4000000 8; --Read response data from host adapter RAM  
-- read status registers to get pattern processing status
--u 4.0 ms r 3000038 8; -- read debug registers

--d 10 ms ; -- Delay to see 50us ADCDLY

--u 2.0 ms w 4000000 04 18 c4 09 00 00 00 00 00 00 00 00; --CONFIG, ADCDLY=25us(0x9c4) 
--u 2.0 ms w 400000C 00 00 00 00 00 00 00 00 00 00 00 00; --Null terminator 
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 0.5 ms w 3000002 18 00000200; -- Write CMD24 to MMC address 0200, FIFO begin(WRITE_BLOCK)
-- read opcode processor response
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 0.5 ms w 3000002 11 00000200; -- Write CMD17 (READ_BLOCK)
--u 1.5 ms r 4000000 8; --Read response data from host adapter RAM  
-- read status registers to get pattern processing status
--u 4.0 ms r 3000038 8; -- read debug registers

-- load pattern is done, execute STATUS opcode to read system status
--u 2.0 ms w 4000000 02 02 00 00 00 00 00 00 00 00 00 00; --STATUS opcode 
--u 2.0 ms w 400000C 00 00 00 00 00 00 00 00 00 00 00 00; --Null terminator 
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 0.5 ms w 3000002 18 00000200; -- Write CMD24 to MMC address 0200, FIFO begin(WRITE_BLOCK)
-- read opcode processor response
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 0.5 ms w 3000002 11 00000200; -- Write CMD17 (READ_BLOCK)
--u 3.5 ms r 4000000 1A; --Read 22+4 bytes of response data from host adapter RAM  

-- execute a CALPWR opcode normally
--u 2.0 ms w 4000000 04 1c 00 80 17 00 00 00 00 00 00 00; --CALPWR 0x800 
--u 2.0 ms w 400000C 00 00 00 00 00 00 00 00 00 00 00 00; --Null terminator 
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 0.5 ms w 3000002 18 00000200; -- Write CMD24 to MMC address 0200, FIFO begin(WRITE_BLOCK)
-- read opcode processor response
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 0.5 ms w 3000002 11 00000200; -- Write CMD17 (READ_BLOCK)
--u 1.5 ms r 4000000 8; --Read response data from host adapter RAM  

--u 4.0 ms w 3000002 19 00000200; -- Write CMD25 to MMC address 0200, FIFO begin(WRITE_MULTIPLE_BLOCK)
--u 0.5 ms w 3000002 C 00000000; -- Write CMD12 (STOP_TRANSMISSION, arg=stuff bits)
--u 1.5 ms r 3000004 4; --Read CMD response
--u 2.0 ms r 3000030 10; -- Read opcode processor status
-- read opcode processor response
--u 0.5 ms w 300000E 0; -- Set host DMA address at 0x00
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 0.5 ms w 3000002 11 00000200; -- Write CMD17 (READ_BLOCK)
--u 0.5 ms w 3000002 12 00000200; -- Write CMD18 (READ_MULTIPLE_BLOCK)
--u 0.5 ms w 3000002 C 00000000; -- Write CMD12 (STOP_TRANSMISSION, arg=stuff bits)
--u 1.5 ms r 4000000 8; --Read response data from host adapter RAM  

-- do it again, host RAM has been overwritten, setup again
-- writing opcodes directly from UART...
--u 2.0 ms w 4000000 04 04 80 08 08 92 04 06 01 00 00 32; --FREQ 2450, POWER 50.0dBm 
--u 2.0 ms w 400000C 00 00 00 00 00 00 00 00 00 00 00 00; --Null terminator 
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 0.5 ms w 3000002 18 00000200; -- Write CMD24 to MMC address 0200, FIFO begin(WRITE_BLOCK)
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 0.5 ms w 3000002 11 00000200; -- Write CMD17 (READ_BLOCK)
--u 1.5 ms r 4000000 8; --Read response data from host adapter RAM  
--u 2.0 ms r 3000030 10; -- Read opcode processor status

--u 0.5 ms w 300002C 07faa; -- Set enables, careful, 0x8000 is RESET
--u 0.5 ms w 3000040 01 01 01; -- Write 1 byte to SPI device 1

-- {0x38, 0, 0 }; // Disable internal refs, Gain=1
-- {30 00 03}     // LDAC pin inactive DAC A & B
-- {00 99 60}     // DAC A input, 0x996
-- {11 80 00}     // DAC B input & update all, 0x800

-- 26-Jul:Added DAC opcodes to host_ram_init.txt at
-- (Host DMA) address 0, don't need to load here anymore
-- Initialize & set both to FS:
--u 1.0 ms w 03000030 00001c04 1c040038 00300003;
--u 1.0 ms w 03000033 fff01c04 1c040000 0011fff0;
--u 1.0 ms w 03000036 0 0 0 0 0 0 0 0 0 0;
--d 5 us ;
-- Write VGA DAC's to HS
--u 1.0 ms w 03000030 80001C04 1C040000 00118000;
--u 1.0 ms w 03000033 0 0 0 0 0 0 0 0 0 0 0 0 0;

-- Bias On then Off, then freq 2450MHz
--u 1.0 ms w 03000030 01010C02 00010C02 08800404;
--u 1.0 ms w 03000033 00009208 0 0;
--u 1.0 ms w 03000036 0 0 0 0 0 0; 
--u 1.0 ms w 0300003C 0 0 0 0;

-- 13-July, 16 byte echo opcode in format for MMC UART entry
--u 1.0 ms w 03000030 01001810 05040302 09080706;
--u 1.0 ms w 03000033 0D0C0B0A 00000F0E 00000000;
--u 1.0 ms w 03000036 00000000 00000000 00000000;
--u 1.0 ms w 03000039 00000000 00000000 00000000;
--u 1.0 ms w 0300003C 00000000 00000000 00000000;
--u 1.0 ms w 0300003F 00000000;  -- write 64 bytes to opcode processor
--d 50 us ;  -- wait a little
--u 2.0 ms r 3000030 4; -- read response
--u 2.0 ms r 3000034 4; -- read response
--u 2.0 ms r 3000038 4; -- read response
--u 2.0 ms r 300003C 4; -- read response

--Power opcode followed by frequency
--u 1.0 ms w 03000030 00010604 04043200 92080880;
--u 1.0 ms w 03000033 0 0 0 0 0 0 0 0 0 0 0 0 0; -- write 64 bytes to opcode processor
--d 50 us ;  -- wait a little
--u 2.0 ms r 3000030 4; -- read response
--u 2.0 ms r 3000034 4; -- read response
--u 2.0 ms r 3000038 4; -- read response
--u 2.0 ms r 300003C 4; -- read response

-- 13-Jul load of opcode fifo works in sim & hardware:
--u 1.0 ms w 3000030 03020100 07060504 0B0A0908; -- Write 12 of 64 bytes to opcode backdoor
--u 1.0 ms w 3000033 0F0E0D0C 13121110 17161514; -- Write 24 of 64 bytes to opcode backdoor
--u 1.0 ms w 3000036 1B1A1918 1F1E1D1C 23222120; -- Write 36 of 64 bytes to opcode backdoor
--u 1.0 ms w 3000039 27262524 2B2A2928 2F2E2D2C; -- Write 48 of 64 bytes to opcode backdoor
--u 1.0 ms w 300003C 33323130 37363534 3B3A3938; -- Write 60 of 64 bytes to opcode backdoor
--u 1.0 ms w 300003F 3F3E3D3C; -- Write 64 of 64 bytes to opcode backdoor, last byte enables opcode procesor


--Older, original John C testing
--u 1.0 ms r0 300002F 4; -- Read 4 card data pipe FIFO values
--u 0.5 ms w 300000E 0; -- Set DMA address at 0x00
--u 0.5 ms w 3000002 12 00000200; -- Write CMD18 (READ_MULTIPLE_BLOCK)
--u 0.5 ms w 3000002 C 00000000; -- Write CMD12 (STOP_TRANSMISSION, arg=stuff bits)
--u 1.0 ms r 4000000 2; --Read status  
--
--u 0.5 ms w 3000002 19 00000200 04 04 05 04 03 02; -- Write CMD25 (WRITE_MULTIPLE_BLOCK)
--u 0.5 ms w 3000002 C 00000000; -- Write CMD12 (STOP_TRANSMISSION, arg=stuff bits)
--u 0.5 ms w 3000002 17 00000001; -- Write CMD23 (SET_BLOCK_COUNT)
--u 0.5 ms w 3000002 12 00000200; -- Write CMD18 (READ_MULTIPLE_BLOCK)
--u 0.5 ms w 3000002 C 00000000; -- Write CMD12 (STOP_TRANSMISSION, arg=stuff bits)

-- This set of commands is useful to verify operation of the system controller module.
--d  10 us;             -- Delay
--u 300 us ;            -- <CR> (Allows autobaud to obtain lock on baud rate.)
--u 300 us i;           -- i<CR>
--u 600 us r 00;        -- read in src region, qty unspecified. (POR default is used.)
--u 600 us r 00 2;      -- read in src region
--u 600 us r 10 2;      -- read in dst region
--u 600 us r;           -- read in dst region, use same qty as previous command, with sequential address.
--u 2.1 ms r 00 31;     -- read across src, dst, misc and beyond, resulting in bus error message
--u 300 us f 14 55 4;   -- fill in dst region
--u 300 us f 18 AA 4;   -- fill
--u 300 us w 1c 01 23;  -- write
--u 300 us w 00 45 67;  -- write
--u 300 us y 0r 45 67;  -- write, should cause "c?" message
--u 300 us w 0r 45 67;  -- write, should cause "a?" message
--u 300 us w 00 t5 67;  -- write, should cause "d?" message
--u 300 us f 00 45 poo;  -- fill, should cause "q?" message

---- This set of commands is useful to exercise the module under test
--d 10 us ;            -- Initial delay
--u 0.5 ms ;            -- <CR> (Allows autobaud to obtain lock on baud rate.)
----u 0.5 ms w 3000022 3; -- Activate host and slave modes
----u 3.0 ms r 3000000 10; -- read MMC host registers
----u 3.0 ms r 3000010 10; -- read MMC slave registers
----u 3.0 ms r 3000020 10; -- read MMC test registers
--u 0.5 ms w 3000009 010624DE; -- Set DDS for sd_clk_o of 400kHz
--u 0.5 ms w 300000E 200; -- Set host DMA address at 0x200
--u 0.5 ms w 3000000 200 0; -- Set blk_size=512, blk_count=0
--u 0.5 ms w 3000002 0 00000000; -- Write CMD0 (RESET, no response)
--u 0.5 ms w 3000002 1 00FF8000; -- Write CMD1 (SEND_OP_COND)
--u 0.5 ms w 3000002 1 00FF8000; -- Write CMD1 (SEND_OP_COND) (ocr_pwrup_done)
--u 0.5 ms w 3000002 2 00000000; -- Write CMD2 (ALL_SEND_CID, long response)
--u 0.5 ms w 3000002 3 00050000; -- Write CMD3 (SET_RELATIVE_ADDRESS)
--u 0.5 ms w 3000002 7 00050000; -- Write CMD7 (SELECT) GOES TO CARD_TRAN
--u 0.5 ms w 3000008 7D000001; -- Set controller timeout=32000, bus size
--u 0.5 ms w 3000002 6 03B70100; -- Write CMD6 (SWITCH) set bus width
--u 0.5 ms w 3000009 80000000; -- Set DDS for sd_clk_o of 50MHz
----u 0.5 ms w 3000002 8 000001AA; -- Write CMD8 (SEND_EXT_CSD, arg=stuff bits, read data)
----d 100 us ;
----u 16.0 ms r 4000200 40; -- Read first 64 EXT_CSD values
----u 1.0 ms r 40002B7 1; -- Read BUS_WIDTH value
----u 1.0 ms r 40003FE 2; -- Read last two EXT_CSD values
--u 0.5 ms w 3000001 8; -- Set blk_count
--u 0.5 ms w 300000E 00; -- Set DMA address at 0x00
----u 0.5 ms w 3000002 10 00000200; -- Write CMD16 (SET_BLOCK_SIZE)
--u 1.5 ms w 3000002 12 00000000; -- Write CMD18 (READ_MULTIPLE_BLOCK)
--u 0.5 ms w 3000002 0C 00000000; -- Write CMD12 (STOP_TRANSMISSION, arg=stuff bits)
--u 1.5 ms w 3000002 12 00000000; -- Write CMD18 (READ_MULTIPLE_BLOCK)
--u 0.5 ms w 3000002 0C 00000000; -- Write CMD12 (STOP_TRANSMISSION, arg=stuff bits)
--u 0.5 ms w 3000002 19 00004000; -- Write CMD25 (WRITE_MULTIPLE_BLOCK)
--u 0.5 ms w 3000002 0C 00000000; -- Write CMD12 (STOP_TRANSMISSION, arg=stuff bits)
--u 1.5 ms w 3000002 0D 00050000; -- Write CMD13 (SEND_STATUS)
--u 1.5 ms w 3000002 12 00000000; -- Write CMD18 (READ_MULTIPLE_BLOCK)
--u 0.5 ms w 3000002 0C 00000000; -- Write CMD12 (STOP_TRANSMISSION, arg=stuff bits)
--u 1.5 ms w 3000002 0D 00050000; -- Write CMD13 (SEND_STATUS)
--u 1.5 ms w 3000002 12 00000000; -- Write CMD18 (READ_MULTIPLE_BLOCK)
--u 0.5 ms w 3000002 0C 00000000; -- Write CMD12 (STOP_TRANSMISSION, arg=stuff bits)
----u 0.5 ms w 3000002 17 00000020; -- Write CMD23 (SET_BLOCK_COUNT)
----u 1.5 ms w 3000002 12 00000000; -- Write CMD18 (READ_MULTIPLE_BLOCK)
----u 6.0 ms r 5004000 20; -- Read the card RAM
----u 6.0 ms r 5004200 20; -- Read the card RAM
----u 6.0 ms r 5004400 20; -- Read the card RAM
----u 6.0 ms r 5004600 20; -- Read the card RAM
--u 0.5 ms w 3000022 100; -- Enable register access to log data
--u 12.0 ms r0 300002A 180; -- Read the log
--u 0.5 ms w 3000002 19 00000800; -- Write CMD25 (WRITE_MULTIPLE_BLOCK)
--u 0.5 ms w 3000002 0C 00000000; -- Write CMD12 (STOP_TRANSMISSION, arg=stuff bits)
--u 1.0 ms r 5000800 2; -- Read first two card data pipe BRAM values
--u 1.0 ms r 50009FE 2; -- Read last two card data pipe BRAM values
--u 0.5 ms w 300000E 1000; -- Set DMA address at 0x1000
--u 0.5 ms w 3000001 2; -- Set to receive 2 blocks
--u 0.5 ms w 3000002 17 00000002; -- Write CMD23 (SET_BLOCK_COUNT)
--u 0.5 ms w 3000002 12 00000600; -- Write CMD18 (READ_MULTIPLE_BLOCK)
--u 0.5 ms w 3000002 C 00000000; -- Write CMD12 (STOP_TRANSMISSION, arg=stuff bits)
--u 1.0 ms r 4001000 2; -- Read first two host data sector BRAM values
--u 1.0 ms r 40011FE 2; -- Read last  two host data sector BRAM values
--u 1.0 ms r 4001200 2; -- Read first two host data sector BRAM values
--u 1.0 ms r 40013FE 2; -- Read last  two host data sector BRAM values
--u 0.5 ms w 3000002 0 00000000; -- Write CMD0 (RESET, no response)
--u 0.5 ms w 3000002 1 00FF8080; -- Write CMD1 (SEND_OP_COND)
--u 1.0 ms r 3000004 4; -- Read CMD Response
--u 0.5 ms w 3000002 2 00000000; -- Write CMD2 (ALL_SEND_CID, long response)
--u 1.0 ms r 3000004 4; -- Read CMD Response
--u 0.5 ms w 3000002 3 00050000; -- Write CMD3 (SET_RELATIVE_ADDRESS)
--u 1.0 ms r 3000004 4; -- Read CMD Response
--u 0.5 ms w 3000002 D 00050000; -- Write CMD13 (SEND_STATUS)
--u 1.0 ms r 3000004 4; -- Read CMD Response
--u 0.5 ms w 3000002 7 00050000; -- Write CMD7 (SELECT) GOES TO CARD_TRAN
--u 1.0 ms r 3000004 4; -- Read CMD Response
--u 0.5 ms w 3000008 7D000002; -- Set controller timeout=32000, bus size
--u 0.5 ms w 3000002 6 03B70200; -- Write CMD6 (SWITCH) set bus size
--u 0.5 ms w 3000002 13 0; -- Write CMD19 (BUSTEST_W) GOES TO CARD_BTST
--u 1.0 ms r 3000004 4; -- Read CMD Response
--u 0.5 ms w 3000002 0E 0; -- Write CMD14 (BUSTEST_R) GOES TO CARD_TRAN
--u 1.0 ms r 3000004 4; -- Read CMD Response
--u 0.5 ms w 3000002 19 00010000; -- Write CMD25 (WRITE_MULTIPLE_BLOCK)
--u 0.5 ms w 3000002 C 00000000; -- Write CMD12 (STOP_TRANSMISSION, arg=stuff bits)
--u 0.5 ms w 3000022 100; -- Enable register access of TLM data
--u 20.0 ms r0 300002A 80; -- Read TLM data
--u 16.0 ms r0 300002F 40; -- Read 64 card data pipe FIFO values
